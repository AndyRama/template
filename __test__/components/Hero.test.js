// Generated by CodiumAI

describe('code snippet', () => {

  // The component renders without errors
  it('should render without errors', () => {
    render(<Hero />);
    expect(screen.queryByText(/Creation & dÃ©veloppement web par Lemur Agency/i)).toBeInTheDocument();
  });

  // The component receives the expected props
  it('should receive the expected props', () => {
    const className = "test-class";
    render(<Hero className={className} />);
    expect(screen.getByTestId("hero-section")).toHaveClass(className);
  });

  // The component uses useRef hook to get a reference to the container element
  it('should use useRef hook to get a reference to the container element', () => {
    render(<Hero />);
    expect(screen.getByTestId("hero-section")).toBeInTheDocument();
    expect(screen.getByTestId("hero-section")).toHaveAttribute("ref");
  });

  // The ref is null
  it('should have null ref', () => {
    render(<Hero />);
    expect(screen.getByTestId("hero-section")).toHaveAttribute("ref", null);
  });

  // The target option of useScroll hook is not provided
  it('should not provide target option for useScroll hook', () => {
    render(<Hero />);
    expect(useScroll).toHaveBeenCalledWith(expect.any(Object), { target: null });
  });

  // The offset option of useScroll hook is not provided
  it('should not provide offset option for useScroll hook', () => {
    render(<Hero />);
    expect(useScroll).toHaveBeenCalledWith(expect.any(Object), { offset: null });
  });
});
